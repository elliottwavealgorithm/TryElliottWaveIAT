import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { stock, question } = await req.json();

    if (!stock || !question) {
      return new Response(
        JSON.stringify({ error: 'Stock symbol and question are required' }),
        { 
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    const prompt = `
Eres un analista senior especializado en la Teor√≠a de Ondas de Elliott con las siguientes credenciales:
- Educaci√≥n: Postgrado en An√°lisis T√©cnico por New York Institute of Finance, Londres School of Economics (Financial Markets)
- Experiencia: 15+ a√±os aplicando Elliott Wave Theory en mercados institucionales
- Especializaci√≥n: Implementaci√≥n pr√°ctica de las teor√≠as de Ralph Nelson Elliott y Robert Prechter

ACTIVO A ANALIZAR: ${stock}

AN√ÅLISIS REQUERIDO:
Proporciona un an√°lisis completo de Elliott Wave siguiendo este formato exacto:

### AN√ÅLISIS ELLIOTT WAVE - ${stock} - ${new Date().toLocaleDateString()}

üåä **CONTEO PRINCIPAL** (Probabilidad: X%)
- Estructura: [Impulsiva/Correctiva/WXY/Tri√°ngulo/Cu√±a]
- Posici√≥n actual: Onda [X] de grado [Y]
- Objetivo inmediato: $[precio]
- Invalidaci√≥n: $[precio]

üèóÔ∏è **CANALIZACIONES ACTIVAS**
- Canal principal: [2-4/0-2/5-B]
- Proyecci√≥n por ruptura: $[precio]
- Confirmaci√≥n de grado superior: [S√ç/NO]

üí° **FUNDAMENTACI√ìN**
**¬øPor qu√© creo en esta hip√≥tesis?**
- [Explicaci√≥n detallada de evidencias t√©cnicas]
- [Price action que confirma el conteo]
- [Contexto macro relevante]

üìä **ESCENARIOS ALTERNATIVOS**
1. **Escenario A** (Probabilidad: X%)
   - Estructura alternativa: [descripci√≥n]
   - Invalidaci√≥n: $[precio]
   - Fundamentaci√≥n: [por qu√© es posible]

2. **Escenario B** (Probabilidad: X%)
   - Estructura alternativa: [descripci√≥n]
   - Invalidaci√≥n: $[precio]
   - Fundamentaci√≥n: [por qu√© es posible]

üéØ **POTENCIAL ONDA 3** [Solo si aplica]
- ¬øEst√° en Wave 3?: [S√ç/NO]
- Grado de la Wave 3: [Mayor/Intermedia/Menor]
- Extensi√≥n esperada: [1.618/2.618/4.236] de Wave 1
- % completado estimado: X%

üí∞ **RECOMENDACI√ìN OPERATIVA**
- Acci√≥n: [COMPRAR/VENDER/ESPERAR]
- Entrada: $[precio]
- Stop Loss: $[precio]
- Objetivo: $[precio]
- Tama√±o posici√≥n: X% del capital
- Prioridad: [ALTA/MEDIA/BAJA] basada en Wave 3

üéØ **CONTEXTO MACRO**
- Fase del ciclo mayor
- Confluencias t√©cnicas
- Factores fundamentales relevantes

INSTRUCCIONES ESPEC√çFICAS:
1. Identifica la estructura de ondas actual (impulsiva/correctiva)
2. Especifica en qu√© onda te encuentras (1,2,3,4,5 o A,B,C)
3. Proporciona m√≠nimo 2 escenarios alternativos con probabilidades
4. Incluye puntos de invalidaci√≥n claros para cada escenario
5. Enf√≥cate especialmente en identificar si est√° en Wave 3 de cualquier grado
6. Proporciona gesti√≥n de riesgo espec√≠fica

Pregunta adicional del usuario: ${question}
`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { 
            role: 'system', 
            content: 'Eres un analista financiero experto que proporciona insights pr√°cticos sobre acciones e inversiones en espa√±ol.' 
          },
          { role: 'user', content: prompt }
        ],
        max_tokens: 500,
        temperature: 0.3,
      }),
    });

    if (!response.ok) {
      console.error('OpenAI API error:', response.status, response.statusText);
      return new Response(
        JSON.stringify({ error: 'Error connecting to AI service' }),
        { 
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    const data = await response.json();
    const analysis = data.choices[0].message.content;

    return new Response(
      JSON.stringify({ 
        stock: stock.toUpperCase(), 
        analysis: analysis 
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );

  } catch (error) {
    console.error('Error in analyze-stock function:', error);
    return new Response(
      JSON.stringify({ error: 'Internal server error' }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});